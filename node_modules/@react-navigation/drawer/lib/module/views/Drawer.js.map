{"version":3,"sources":["Drawer.tsx"],"names":["React","StyleSheet","I18nManager","Platform","Keyboard","StatusBar","View","InteractionManager","PanGestureHandler","TapGestureHandler","State","Animated","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ONE","shouldEnableGesture","OS","navigator","window","isWebAppleDevice","test","userAgent","MSStream","DrawerView","PureComponent","e","open","onClose","props","key","interactionHandle","undefined","clearInteractionHandle","createInteractionHandle","drawerType","gestureEnabled","UNDETERMINED","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","setValue","layout","width","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","statusBarAnimation","isStatusBarHidden","setHidden","componentDidMount","document","body","addEventListener","handleEscape","componentDidUpdate","prevProps","isGestureEnabled","componentWillUnmount","removeEventListener","render","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","right","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","flexDirection","content","transform","handleTapStateChange","handleDrawerLayout","container","nonPermanent","opacity","zIndex","drawerPostion","create","backgroundColor","maxWidth","top","bottom","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\n/**\n * Disables the pan gesture by default on Apple devices in the browser.\n * https://stackoverflow.com/a/9039885\n */\nfunction shouldEnableGesture(): boolean {\n  if (\n    Platform.OS === 'web' &&\n    typeof navigator !== 'undefined' &&\n    typeof window !== 'undefined'\n  ) {\n    const isWebAppleDevice =\n      /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n    return !isWebAppleDevice;\n  }\n\n  return true;\n}\n\nexport default class DrawerView extends React.PureComponent<Props> {\n  static defaultProps = {\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: shouldEnableGesture(),\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      gestureEnabled,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (prevProps.gestureEnabled !== gestureEnabled) {\n      this.isGestureEnabled.setValue(gestureEnabled ? TRUE : FALSE);\n    }\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n  private isGestureEnabled = new Value(\n    this.props.gestureEnabled ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, State.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : 0\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        ref={onGestureRef}\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              drawerType !== 'permanent' && {\n                transform: [{ translateX: contentTranslateX }],\n              },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen}\n              importantForAccessibility={\n                isOpen ? 'no-hide-descendants' : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {// Disable overlay if sidebar is permanent\n            drawerType === 'permanent' ? null : (\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Overlay progress={progress} style={overlayStyle} />\n              </TapGestureHandler>\n            )}\n          </Animated.View>\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    {\n                      transform: [{ translateX: drawerTranslateX }],\n                      opacity: this.drawerOpacity,\n                    },\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]}